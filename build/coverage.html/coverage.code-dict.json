{"/home/travis/build/npmtest/node-npmtest-react-native-datepicker/test.js":"/* istanbul instrument in package npmtest_react_native_datepicker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-datepicker/lib.npmtest_react_native_datepicker.js":"/* istanbul instrument in package npmtest_react_native_datepicker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_datepicker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_datepicker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-datepicker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-datepicker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_datepicker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_datepicker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_datepicker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_datepicker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_datepicker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_datepicker.__dirname + '/lib.npmtest_react_native_datepicker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-datepicker/node_modules/react-native-datepicker/index.js":"import React, {Component} from 'react';\nimport {\n  View,\n  Text,\n  Image,\n  Modal,\n  TouchableHighlight,\n  DatePickerAndroid,\n  TimePickerAndroid,\n  DatePickerIOS,\n  Platform,\n  Animated\n} from 'react-native';\nimport Style from './style';\nimport Moment from 'moment';\n\nconst FORMATS = {\n  'date': 'YYYY-MM-DD',\n  'datetime': 'YYYY-MM-DD HH:mm',\n  'time': 'HH:mm'\n};\n\nconst SUPPORTED_ORIENTATIONS = ['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'];\n\nclass DatePicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      date: this.getDate(),\n      modalVisible: false,\n      animatedHeight: new Animated.Value(0)\n    };\n\n    this.datePicked = this.datePicked.bind(this);\n    this.onPressDate = this.onPressDate.bind(this);\n    this.onPressCancel = this.onPressCancel.bind(this);\n    this.onPressConfirm = this.onPressConfirm.bind(this);\n    this.onDatePicked = this.onDatePicked.bind(this);\n    this.onTimePicked = this.onTimePicked.bind(this);\n    this.onDatetimePicked = this.onDatetimePicked.bind(this);\n    this.onDatetimeTimePicked = this.onDatetimeTimePicked.bind(this);\n    this.setModalVisible = this.setModalVisible.bind(this);\n  }\n\n  componentWillMount() {\n    // ignore the warning of Failed propType for date of DatePickerIOS, will remove after being fixed by official\n    console.ignoredYellowBox = [\n      'Warning: Failed propType'\n      // Other warnings you don't want like 'jsSchedulingOverhead',\n    ];\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.date !== this.props.date) {\n      this.setState({date: this.getDate(nextProps.date)});\n    }\n  }\n\n  setModalVisible(visible) {\n    const {height, duration} = this.props;\n\n    // slide animation\n    if (visible) {\n      this.setState({modalVisible: visible});\n      return Animated.timing(\n        this.state.animatedHeight,\n        {\n          toValue: height,\n          duration: duration\n        }\n      ).start();\n    } else {\n      return Animated.timing(\n        this.state.animatedHeight,\n        {\n          toValue: 0,\n          duration: duration\n        }\n      ).start(() => {\n        this.setState({modalVisible: visible});\n      });\n    }\n  }\n\n  onStartShouldSetResponder(e) {\n    return true;\n  }\n\n  onMoveShouldSetResponder(e) {\n    return true;\n  }\n\n  onPressCancel() {\n    this.setModalVisible(false);\n\n    if (typeof this.props.onCloseModal === 'function') {\n      this.props.onCloseModal();\n    }\n  }\n\n  onPressConfirm() {\n    this.datePicked();\n    this.setModalVisible(false);\n\n    if (typeof this.props.onCloseModal === 'function') {\n      this.props.onCloseModal();\n    }\n  }\n\n  getDate(date = this.props.date) {\n    const {mode, minDate, maxDate, format = FORMATS[mode]} = this.props;\n\n    // date默认值\n    if (!date) {\n      let now = new Date();\n      if (minDate) {\n        let _minDate = this.getDate(minDate);\n\n        if (now < _minDate) {\n          return _minDate;\n        }\n      }\n\n      if (maxDate) {\n        let _maxDate = this.getDate(maxDate);\n\n        if (now > _maxDate) {\n          return _maxDate;\n        }\n      }\n\n      return now;\n    }\n\n    if (date instanceof Date) {\n      return date;\n    }\n\n    return Moment(date, format).toDate();\n  }\n\n  getDateStr(date = this.props.date) {\n    const {mode, format = FORMATS[mode]} = this.props;\n\n    if (date instanceof Date) {\n      return Moment(date).format(format);\n    } else {\n      return Moment(this.getDate(date)).format(format);\n    }\n  }\n\n  datePicked() {\n    if (typeof this.props.onDateChange === 'function') {\n      this.props.onDateChange(this.getDateStr(this.state.date), this.state.date);\n    }\n  }\n\n  getTitleElement() {\n    const {date, placeholder, customStyles} = this.props;\n\n    if (!date && placeholder) {\n      return (<Text style={[Style.placeholderText, customStyles.placeholderText]}>{placeholder}</Text>);\n    }\n    return (<Text style={[Style.dateText, customStyles.dateText]}>{this.getDateStr()}</Text>);\n  }\n\n  onDatePicked({action, year, month, day}) {\n    if (action !== DatePickerAndroid.dismissedAction) {\n      this.setState({\n        date: new Date(year, month, day)\n      });\n      this.datePicked();\n    }\n  }\n\n  onTimePicked({action, hour, minute}) {\n    if (action !== DatePickerAndroid.dismissedAction) {\n      this.setState({\n        date: Moment().hour(hour).minute(minute).toDate()\n      });\n      this.datePicked();\n    }\n  }\n\n  onDatetimePicked({action, year, month, day}) {\n    const {mode, androidMode, format = FORMATS[mode], is24Hour = !format.match(/h|a/)} = this.props;\n\n    if (action !== DatePickerAndroid.dismissedAction) {\n      let timeMoment = Moment(this.state.date);\n\n      TimePickerAndroid.open({\n        hour: timeMoment.hour(),\n        minute: timeMoment.minutes(),\n        is24Hour: is24Hour,\n        mode: androidMode\n      }).then(this.onDatetimeTimePicked.bind(this, year, month, day));\n    }\n  }\n\n  onDatetimeTimePicked(year, month, day, {action, hour, minute}) {\n    if (action !== DatePickerAndroid.dismissedAction) {\n      this.setState({\n        date: new Date(year, month, day, hour, minute)\n      });\n      this.datePicked();\n    }\n  }\n\n  onPressDate() {\n    if (this.props.disabled) {\n      return true;\n    }\n\n    // reset state\n    this.setState({\n      date: this.getDate()\n    });\n\n    if (Platform.OS === 'ios') {\n      this.setModalVisible(true);\n    } else {\n\n      const {mode, androidMode, format = FORMATS[mode], minDate, maxDate, is24Hour = !format.match(/h|a/)} = this.props;\n\n      // 选日期\n      if (mode === 'date') {\n        DatePickerAndroid.open({\n          date: this.state.date,\n          minDate: minDate && this.getDate(minDate),\n          maxDate: maxDate && this.getDate(maxDate),\n          mode: androidMode\n        }).then(this.onDatePicked);\n      } else if (mode === 'time') {\n        // 选时间\n\n        let timeMoment = Moment(this.state.date);\n\n        TimePickerAndroid.open({\n          hour: timeMoment.hour(),\n          minute: timeMoment.minutes(),\n          is24Hour: is24Hour\n        }).then(this.onTimePicked);\n      } else if (mode === 'datetime') {\n        // 选日期和时间\n\n        DatePickerAndroid.open({\n          date: this.state.date,\n          minDate: minDate && this.getDate(minDate),\n          maxDate: maxDate && this.getDate(maxDate),\n          mode: androidMode\n        }).then(this.onDatetimePicked);\n      }\n    }\n\n    if (typeof this.props.onOpenModal === 'function') {\n      this.props.onOpenModal();\n    }\n  }\n\n  render() {\n    const {\n      mode,\n      style,\n      customStyles,\n      disabled,\n      showIcon,\n      iconSource,\n      minDate,\n      maxDate,\n      minuteInterval,\n      timeZoneOffsetInMinutes,\n      cancelBtnText,\n      confirmBtnText\n    } = this.props;\n\n    const dateInputStyle = [\n      Style.dateInput, customStyles.dateInput,\n      disabled && Style.disabled,\n      disabled && customStyles.disabled\n    ];\n\n    return (\n      <TouchableHighlight\n        style={[Style.dateTouch, style]}\n        underlayColor={'transparent'}\n        onPress={this.onPressDate}\n      >\n        <View style={[Style.dateTouchBody, customStyles.dateTouchBody]}>\n          <View style={dateInputStyle}>\n            {this.getTitleElement()}\n          </View>\n          {showIcon && <Image\n            style={[Style.dateIcon, customStyles.dateIcon]}\n            source={iconSource}\n          />}\n          {Platform.OS === 'ios' && <Modal\n            transparent={true}\n            animationType=\"none\"\n            visible={this.state.modalVisible}\n            supportedOrientations={SUPPORTED_ORIENTATIONS}\n            onRequestClose={() => {this.setModalVisible(false);}}\n          >\n            <View\n              style={{flex: 1}}\n            >\n              <TouchableHighlight\n                style={Style.datePickerMask}\n                activeOpacity={1}\n                underlayColor={'#00000077'}\n                onPress={this.onPressCancel}\n              >\n                <TouchableHighlight\n                  underlayColor={'#fff'}\n                  style={{flex: 1}}\n                >\n                  <Animated.View\n                    style={[Style.datePickerCon, {height: this.state.animatedHeight}, customStyles.datePickerCon]}\n                  >\n                    <DatePickerIOS\n                      date={this.state.date}\n                      mode={mode}\n                      minimumDate={minDate && this.getDate(minDate)}\n                      maximumDate={maxDate && this.getDate(maxDate)}\n                      onDateChange={(date) => this.setState({date: date})}\n                      minuteInterval={minuteInterval}\n                      timeZoneOffsetInMinutes={timeZoneOffsetInMinutes}\n                      style={[Style.datePicker, customStyles.datePicker]}\n                    />\n                    <TouchableHighlight\n                      underlayColor={'transparent'}\n                      onPress={this.onPressCancel}\n                      style={[Style.btnText, Style.btnCancel, customStyles.btnCancel]}\n                    >\n                      <Text\n                        style={[Style.btnTextText, Style.btnTextCancel, customStyles.btnTextCancel]}\n                      >\n                        {cancelBtnText}\n                      </Text>\n                    </TouchableHighlight>\n                    <TouchableHighlight\n                      underlayColor={'transparent'}\n                      onPress={this.onPressConfirm}\n                      style={[Style.btnText, Style.btnConfirm, customStyles.btnConfirm]}\n                    >\n                      <Text style={[Style.btnTextText, customStyles.btnTextConfirm]}>{confirmBtnText}</Text>\n                    </TouchableHighlight>\n                  </Animated.View>\n                </TouchableHighlight>\n              </TouchableHighlight>\n            </View>\n          </Modal>}\n        </View>\n      </TouchableHighlight>\n    );\n  }\n}\n\nDatePicker.defaultProps = {\n  mode: 'date',\n  androidMode: 'default',\n  date: '',\n  // component height: 216(DatePickerIOS) + 1(borderTop) + 42(marginTop), IOS only\n  height: 259,\n\n  // slide animation duration time, default to 300ms, IOS only\n  duration: 300,\n  confirmBtnText: '确定',\n  cancelBtnText: '取消',\n  iconSource: require('./date_icon.png'),\n  customStyles: {},\n\n  // whether or not show the icon\n  showIcon: true,\n  disabled: false,\n  placeholder: '',\n  modalOnResponderTerminationRequest: e => true\n};\n\nDatePicker.propTypes = {\n  mode: React.PropTypes.oneOf(['date', 'datetime', 'time']),\n  androidMode: React.PropTypes.oneOf(['calendar', 'spinner', 'default']),\n  date: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.instanceOf(Date)]),\n  format: React.PropTypes.string,\n  minDate: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.instanceOf(Date)]),\n  maxDate: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.instanceOf(Date)]),\n  height: React.PropTypes.number,\n  duration: React.PropTypes.number,\n  confirmBtnText: React.PropTypes.string,\n  cancelBtnText: React.PropTypes.string,\n  iconSource: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.object]),\n  customStyles: React.PropTypes.object,\n  showIcon: React.PropTypes.bool,\n  disabled: React.PropTypes.bool,\n  onDateChange: React.PropTypes.func,\n  onOpenModal: React.PropTypes.func,\n  onCloseModal: React.PropTypes.func,\n  placeholder: React.PropTypes.string,\n  modalOnResponderTerminationRequest: React.PropTypes.func,\n  is24Hour: React.PropTypes.bool\n};\n\nexport default DatePicker;\n","/home/travis/build/npmtest/node-npmtest-react-native-datepicker/node_modules/react-native-datepicker/style.js":"import {StyleSheet} from 'react-native';\n\nlet style = StyleSheet.create({\n  dateTouch: {\n    width: 142\n  },\n  dateTouchBody: {\n    flexDirection: 'row',\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  dateIcon: {\n    width: 32,\n    height: 32,\n    marginLeft: 5,\n    marginRight: 5\n  },\n  dateInput: {\n    flex: 1,\n    height: 40,\n    borderWidth: 1,\n    borderColor: '#aaa',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  dateText: {\n    color: '#333'\n  },\n  placeholderText: {\n    color: '#c9c9c9'\n  },\n  datePickerMask: {\n    flex: 1,\n    alignItems: 'flex-end',\n    flexDirection: 'row',\n    backgroundColor: '#00000077'\n  },\n  datePickerCon: {\n    backgroundColor: '#fff',\n    height: 0,\n    overflow: 'hidden'\n  },\n  btnText: {\n    position: 'absolute',\n    top: 0,\n    height: 42,\n    padding: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  btnTextText: {\n    fontSize: 16,\n    color: '#46cf98'\n  },\n  btnTextCancel: {\n    color: '#666'\n  },\n  btnCancel: {\n    left: 0\n  },\n  btnConfirm: {\n    right: 0\n  },\n  datePicker: {\n    marginTop: 42,\n    borderTopColor: '#ccc',\n    borderTopWidth: 1\n  },\n  disabled: {\n    backgroundColor: '#eee'\n  }\n});\n\nexport default style;\n"}